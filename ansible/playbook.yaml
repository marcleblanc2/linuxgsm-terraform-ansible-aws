---

- hosts: terraform-ec2-instances
  become: true
  vars_files:
    - ./vars/defaults.yaml
    - ./vars/tf_ansible_vars_file.yaml
  tasks:

  - name: Add i386 arch
    command: dpkg --add-architecture i386
  
  - name: Update package list
    apt:
      update_cache: yes
      cache_valid_time: 3600
  
  - name: Upgrade installed packages
    apt:
      upgrade: full
  
  - name: Update Ansible package facts, so Ansible knows which packages are installed
    package_facts:
      manager: apt

  - name: Pre-select agreement to the SteamCMD licence agreement before SteamCMD installation
    shell: 
      cmd: echo steam steam/question select "I AGREE" | sudo debconf-set-selections
    when: "'steamcmd:i386' not in ansible_facts.packages"

  - name: Pre-acknowledge the SteamCMD licence note
    shell: 
      cmd: echo steam steam/license note '' | sudo debconf-set-selections
    when: "'steamcmd:i386' not in ansible_facts.packages"

  - name: Install LGSM dependencies
    apt:
      name: "{{ item }}"
    loop: "{{ lgsm_dependencies }}"

  - name: Ensure LGSM service account group exists
    group:
      name: "{{ tf_svc_account }}"
      system: yes

  - name: Ensure LGSM service account exists
    user:
      name: "{{ tf_svc_account }}"
      group: "{{ tf_svc_account }}"
      shell: /sbin/nologin
      system: yes

  - name: Ensure LGSM service account cannot log in
    shell: 
      cmd: usermod -L {{ tf_svc_account }}

  - name: Download LGSM server installation script
    get_url:
      url: https://linuxgsm.sh
      dest: "/home/{{ tf_svc_account }}/linuxgsm.sh"
      mode: 0700
      owner: "{{ tf_svc_account }}"

  - name: Check if the ~/vhserver directory already exists from a previous installation attempt
    stat: 
      path: "/home/{{ tf_svc_account }}/vhserver"
    register: vhserver_file

  - name: Use linuxgsm.sh to initialize vhserver
    shell: ~/linuxgsm.sh vhserver
    args:
      executable: /bin/bash
      chdir: "/home/{{ tf_svc_account }}"
    become_user: "{{ tf_svc_account }}"
    register: vhserver_init
    when: not vhserver_file.stat.exists

  - debug:
      var: vhserver_init.stdout_lines
    when: not vhserver_file.stat.exists

  - name: Install the vhserver
    shell: ~/vhserver auto-install > install.log
    args:
      executable: /bin/bash
      chdir: "/home/{{ tf_svc_account }}"
    become_user: "{{ tf_svc_account }}"
    when: not vhserver_file.stat.exists

  - name: Copy the LGSM instance configuration file
    copy:
      src: files/vhserver.cfg
      dest: /home/{{ tf_svc_account }}/lgsm/config-lgsm/vhserver/vhserver.cfg
      owner: "{{ tf_svc_account }}"
      group: "{{ tf_svc_account }}"
    register: vhservercfg

  - name: Restart the game service
    become_user: "{{ tf_svc_account }}"
    shell: ~/vhserver restart
    args:
      executable: /bin/bash
      chdir: "/home/{{ tf_svc_account }}"
    when: vhservercfg.changed
